#
# WDM Agent build system
# Authors: Zhengyu li <lizhengyu419@gmail.com>
#

# Cmake Settings
CMAKE_MINIMUM_REQUIRED (VERSION 2.8.0)

# Project summary
SET (PROJECT_NAME_SHORT "WDM-AGENT")
SET (PROJECT_NAME_LONG "WDM Agent")
SET (PROJECT_DESCRIPTION "Agent for WDM (Wire Data Management) system.")
SET (PROJECT_COPYRIGHT "Copyright (C) zhengyu li, 2014")
SET (PROJECT_CONTACT "lizhengyu419@gmail.com")
SET (PROJECT_VENDOR "zhengyu li")

# Project Version
SET (PROJECT_VERSION_MAJOR "3")
SET (PROJECT_VERSION_MINOR "5")
SET (PROJECT_VERSION_REVISION "0")
SET (PROJECT_VERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_REVISION})

SET (WDM_AGENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
SET (WDM_AGENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})
SET (WDM_AGENT_VERSION_REVISION ${PROJECT_VERSION_REVISION})
SET (WDM_AGENT_VERSION ${PROJECT_VERSION})

MESSAGE (STATUS "WDM-Agent Version: ${WDM_AGENT_VERSION}")
STRING (TOLOWER ${PROJECT_NAME_SHORT} PROJECT_NAME_SHORT_LOWER)
PROJECT (${PROJECT_NAME_SHORT}-${PROJECT_VERSION})

# Build type
IF (NOT CMAKE_BUILD_TYPE)
  SET (CMAKE_BUILD_TYPE "Debug" CACHE STRING
    "Choose the type of build, options are: None, Debug, Release, RelWithDebInfo, MinSizeRel."
    FORCE)
ENDIF (NOT CMAKE_BUILD_TYPE)
MESSAGE ("Set build type to '${CMAKE_BUILD_TYPE}'")

#SET (CMAKE_VERBOSE_MAKEFILE ON)
ADD_DEFINITIONS ("-DHAVE_PF_RING")

# Install prefix
SET (CMAKE_INSTALL_PREFIX "/usr")

# Set additional CMake modules path
SET (CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})

# Check libraries
FIND_PACKAGE (pcap)
IF (NOT PCAP_FOUND)
  MESSAGE (SEND_ERROR "Not Find pcap")
ENDIF (NOT PCAP_FOUND)

FIND_PACKAGE (zmq)
IF (NOT ZMQ_FOUND)
  MESSAGE (SEND_ERROR "Not Find zmq")
ENDIF (NOT ZMQ_FOUND)

FIND_PACKAGE (czmq)
IF (NOT CZMQ_FOUND)
  MESSAGE (SEND_ERROR "Not Find czmq")
ENDIF (NOT CZMQ_FOUND)

FIND_PACKAGE (hiredis)
IF (NOT HIREDIS_FOUND)
  MESSAGE (SEND_ERROR "Not Find hiredis")
ENDIF (NOT HIREDIS_FOUND)

FIND_PACKAGE (ini_config)
IF (NOT INICONFIG_FOUND)
  MESSAGE (SEND_ERROR "Not find ini_config")
ENDIF (NOT INICONFIG_FOUND)

FIND_PACKAGE (jansson)
IF (NOT JANSSON_FOUND)
  MESSAGE (SEND_ERROR "Not find jansson")
ENDIF (NOT JANSSON_FOUND)

FIND_PACKAGE (z)
IF (NOT ZLIB_FOUND)
  MESSAGE (SEND_ERROR "Not find zlib")
ENDIF (NOT ZLIB_FOUND)

# Cmake output directory
SET (CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Full paths for the installation
SET (WDM_AGENT_BIN_DIR ${CMAKE_INSTALL_PREFIX}/bin)
SET (WDM_AGENT_SBIN_DIR ${CMAKE_INSTALL_PREFIX}/sbin)
SET (WDM_AGENT_LIB_DIR ${CMAKE_INSTALL_PREFIX}/lib)
SET (WDM_AGENT_INCLUDE_DIR ${CMAKE_INSTALL_PREFIX}/include)
SET (WDM_AGENT_DATA_DIR ${CMAKE_INSTALL_PREFIX}/share/wdm)
SET (WDM_AGENT_DOC_DIR ${CMAKE_INSTALL_PREFIX}/share/doc/wdm)
SET (WDM_AGENT_MANUAL_DIR ${CMAKE_INSTALL_PREFIX}/share/man)
SET (WDM_AGENT_CONFIG_DIR /etc/wdm)

ADD_SUBDIRECTORY (config)
ADD_SUBDIRECTORY (src)
ADD_SUBDIRECTORY (examples)
ADD_SUBDIRECTORY (scripts)

# Cpack Settings
INCLUDE (InstallRequiredSystemLibraries)

SET (CPACK_SYSTEM_NAME ${CMAKE_SYSTEM_NAME})
SET (CPACK_PACKAGE_NAME ${PROJECT_NAME_SHORT_LOWER})
SET (CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
SET (CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})
SET (CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_REVISION})
SET (CPACK_PACKAGE_VERSION ${PROJECT_VERSION})
SET (CPACK_PACKAGE_DESCRIPTION_SUMMARY ${PROJECT_DESCRIPTION})
SET (CPACK_PACKAGE_VENDOR ${PROJECT_VENDOR})
SET (CPACK_PACKAGE_CONTACT ${PROJECT_CONTACT})
SET (CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_SOURCE_DIR}/README.md")
SET (CPACK_RESOURCE_FILE_README "${CMAKE_SOURCE_DIR}/README.md")
SET (CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/COPYING")
SET (CPACK_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
SET (CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CMAKE_SYSTEM_PROCESSOR}")

# RPM settings
INCLUDE (${CMAKE_MODULE_PATH}/FindRPMBuild.cmake)
IF (RPMBUILD_FOUND)
  SET (CPACK_GENERATOR "RPM")
  SET (CPACK_RPM_PACKAGE_SUMMARY ${CPACK_PACKAGE_DESCRIPTION_SUMMARY})
  SET (CPACK_RPM_PACKAGE_NAME ${CPACK_PACKAGE_NAME})
  SET (CPACK_RPM_PACKAGE_VERSION ${PROJECT_VERSION})
  SET (CPACK_RPM_PACKAGE_LICENSE ${CPACK_RESOURCE_FILE_LICENSE})
  SET (CPACK_RPM_PACKAGE_GROUP ${PROJECT_VENDOR})
  SET (CPACK_RPM_PACKAGE_VENDOR ${PROJECT_VENDOR})
  SET (CPACK_RPM_PACKAGE_DESCRIPTION ${PROJECT_DESCRIPTION})
  SET (CPACK_RPM_PACKAGE_DEPENDS "czmq, hiredis, libini_config, libpcap, zlib, zeromq3, jansson")
  SET (CPACK_RPM_PACKAGE_REQUIRES "${CPACK_RPM_PACKAGE_DEPENDS}")
  SET (CPACK_RPM_POST_INSTALL_SCRIPT_FILE "${CMAKE_SOURCE_DIR}/post-install.sh")
ENDIF (RPMBUILD_FOUND)

INCLUDE (CPack)
