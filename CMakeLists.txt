#
# WDA Agent cmake build config
# Authors: Zhengyu li <lizhengyu419@gmail.com>
#

# Cmake Settings
CMAKE_MINIMUM_REQUIRED (VERSION 2.8.0)

# Root project
SET (ROOT_PROJECT "WDA")
STRING (TOLOWER ${ROOT_PROJECT} ROOT_PROJECT_LOWER)
SET (SUB_PROJECT "AGENT")
STRING (TOLOWER ${SUB_PROJECT} SUB_PROJECT_LOWER)

# Sub-project summary
SET (PROJECT_NAME_SHORT "${ROOT_PROJECT}_${SUB_PROJECT_LOWER}")
SET (PROJECT_NAME_LONG "${ROOT_PROJECT} ${SUB_PROJECT_LOWER}")
SET (PROJECT_DESCRIPTION "${ROOT_PROJECT} ${SUB_PROJECT_LOWER} system.")
SET (PROJECT_COPYRIGHT "Copyright (C) zhengyu li, 2014")
SET (PROJECT_CONTACT "lizhengyu419@gmail.com")
SET (PROJECT_VENDOR "zhengyu li")

# Project Version
SET (PROJECT_VERSION_MAJOR "1")
SET (PROJECT_VERSION_MINOR "0")
SET (PROJECT_VERSION_REVISION "0")
SET (PROJECT_VERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_REVISION})

MESSAGE (STATUS "${PROJECT_NAME_SHORT} Version: ${PROJECT_VERSION}")
STRING (TOLOWER ${PROJECT_NAME_SHORT} PROJECT_NAME_SHORT_LOWER)
PROJECT (${PROJECT_NAME_SHORT}-${PROJECT_VERSION})

# Build type
IF (NOT CMAKE_BUILD_TYPE)
  SET (CMAKE_BUILD_TYPE "Debug" CACHE STRING
    "Choose the type of build, options are: None, Debug, Release, RelWithDebInfo, MinSizeRel." FORCE)
ENDIF (NOT CMAKE_BUILD_TYPE)
MESSAGE ("Set build type to '${CMAKE_BUILD_TYPE}'")

#SET (CMAKE_VERBOSE_MAKEFILE ON)

# Set compile flags
SET (CMAKE_C_FLAGS "-Wall")
SET (CMAKE_C_FLAGS_DEBUG "-Wall -g")
SET (CMAKE_C_FLAGS_RELEASE "-Wall -O3")

# Set additional CMake modules path
SET (CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})

# Check libraries
FIND_PACKAGE (pcap)
IF (NOT PCAP_FOUND)
  MESSAGE (SEND_ERROR "Not Find pcap")
ENDIF (NOT PCAP_FOUND)

FIND_PACKAGE (zmq)
IF (NOT ZMQ_FOUND)
  MESSAGE (SEND_ERROR "Not Find zmq")
ENDIF (NOT ZMQ_FOUND)

FIND_PACKAGE (czmq)
IF (NOT CZMQ_FOUND)
  MESSAGE (SEND_ERROR "Not Find czmq")
ENDIF (NOT CZMQ_FOUND)

FIND_PACKAGE (ini_config)
IF (NOT INICONFIG_FOUND)
  MESSAGE (SEND_ERROR "Not find ini_config")
ENDIF (NOT INICONFIG_FOUND)

FIND_PACKAGE (jansson)
IF (NOT JANSSON_FOUND)
  MESSAGE (SEND_ERROR "Not find jansson")
ENDIF (NOT JANSSON_FOUND)

FIND_PACKAGE (z)
IF (NOT ZLIB_FOUND)
  MESSAGE (SEND_ERROR "Not find zlib")
ENDIF (NOT ZLIB_FOUND)

FIND_PACKAGE (uuid)
IF (NOT UUID_FOUND)
  MESSAGE (SEND_ERROR "Not find uuid")
ENDIF (NOT UUID_FOUND)

# Cmake output directory
SET (CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Install prefix
SET (CMAKE_INSTALL_PREFIX "/usr")

# Install paths
SET (PROJECT_BIN_DIR ${CMAKE_INSTALL_PREFIX}/bin)
SET (PROJECT_SBIN_DIR ${CMAKE_INSTALL_PREFIX}/sbin)
SET (PROJECT_LIB_DIR ${CMAKE_INSTALL_PREFIX}/lib)
SET (PROJECT_INCLUDE_DIR ${CMAKE_INSTALL_PREFIX}/include/${ROOT_PROJECT_LOWER})
SET (PROJECT_DATA_DIR ${CMAKE_INSTALL_PREFIX}/share/${ROOT_PROJECT_LOWER})
SET (PROJECT_DOC_DIR ${CMAKE_INSTALL_PREFIX}/share/doc/${ROOT_PROJECT_LOWER}-${PROJECT_VERSION})
SET (PROJECT_CONFIG_DIR /etc/${ROOT_PROJECT_LOWER})
SET (PROJECT_RUN_DIR /var/run/${ROOT_PROJECT_LOWER})

ADD_SUBDIRECTORY (config)
ADD_SUBDIRECTORY (src)
ADD_SUBDIRECTORY (tools)

# Cpack Settings
INCLUDE (InstallRequiredSystemLibraries)

SET (CPACK_SYSTEM_NAME ${CMAKE_SYSTEM_NAME})
SET (CPACK_PACKAGE_NAME ${PROJECT_NAME_SHORT_LOWER})
SET (CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
SET (CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})
SET (CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_REVISION})
SET (CPACK_PACKAGE_VERSION ${PROJECT_VERSION})
SET (CPACK_PACKAGE_DESCRIPTION_SUMMARY ${PROJECT_DESCRIPTION})
SET (CPACK_PACKAGE_VENDOR ${PROJECT_VENDOR})
SET (CPACK_PACKAGE_CONTACT ${PROJECT_CONTACT})
SET (CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_SOURCE_DIR}/README.md")
SET (CPACK_RESOURCE_FILE_README "${CMAKE_SOURCE_DIR}/README.md")
SET (CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/COPYING")
SET (CPACK_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
SET (CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CMAKE_SYSTEM_PROCESSOR}")

# RPM settings
INCLUDE (${CMAKE_MODULE_PATH}/FindRPMBuild.cmake)
IF (RPMBUILD_FOUND)
  SET (CPACK_GENERATOR "RPM")
  SET (CPACK_RPM_PACKAGE_SUMMARY ${CPACK_PACKAGE_DESCRIPTION_SUMMARY})
  SET (CPACK_RPM_PACKAGE_NAME ${CPACK_PACKAGE_NAME})
  SET (CPACK_RPM_PACKAGE_VERSION ${PROJECT_VERSION})
  SET (CPACK_RPM_PACKAGE_LICENSE ${CPACK_RESOURCE_FILE_LICENSE})
  SET (CPACK_RPM_PACKAGE_GROUP ${PROJECT_VENDOR})
  SET (CPACK_RPM_PACKAGE_VENDOR ${PROJECT_VENDOR})
  SET (CPACK_RPM_PACKAGE_DESCRIPTION ${PROJECT_DESCRIPTION})
#  SET (CPACK_RPM_PACKAGE_DEPENDS "zeromq, libczmq1, libini_config, libpcap, zlib, jansson, libuuid")
  SET (CPACK_RPM_PACKAGE_REQUIRES "${CPACK_RPM_PACKAGE_DEPENDS}")
  SET (CPACK_RPM_PRE_INSTALL_SCRIPT_FILE "${CMAKE_SOURCE_DIR}/scripts/pre_install.sh")
  SET (CPACK_RPM_POST_INSTALL_SCRIPT_FILE "${CMAKE_SOURCE_DIR}/scripts/post_install.sh")
  SET (CPACK_RPM_PRE_UNINSTALL_SCRIPT_FILE "${CMAKE_SOURCE_DIR}/scripts/pre_uninstall.sh")
  SET (CPACK_RPM_POST_UNINSTALL_SCRIPT_FILE "${CMAKE_SOURCE_DIR}/scripts/post_uninstall.sh")
ENDIF (RPMBUILD_FOUND)

INCLUDE (CPack)
