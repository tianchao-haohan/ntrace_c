#+TITLE: Session breakdown interface
#+AUTHOR: zhengyu li
#+OPTIONS: ^:nil \n:t

** Tcp common breakdown interface
|-------------------+-------------------+----------------+---------------------------+-------------------------------------------------------------|
| variable type     | variable name     | breakdown type | breakdown name            | description                                                 |
|-------------------+-------------------+----------------+---------------------------+-------------------------------------------------------------|
| /                 | <                 | <              | <                         | <                                                           |
| u_long_long       | bkdId             | u_long_long    | breakdown_id              | Global breakdown id                                         |
| u_long_long       | timestamp         | u_long_long    | timestamp                 | Timestamp in seconds                                        |
| protoType         | proto             | char *         | protocol                  | Tcp application level protocol type                         |
| struct in_addr    | srcIp             | char *         | source_ip                 | Source ip                                                   |
| u_short           | srcPort           | u_short        | source_port               | Source port                                                 |
| struct in_addr    | svcIp             | char *         | service_ip                | Service ip                                                  |
| u_short           | svcPort           | u_short        | service_port              | Service port                                                |
| uuid_t            | connId            | char *         | tcp_connection_id         | Global tcp connection id                                    |
| tcpBreakdownState | state             | u_int          | tcp_state                 | Tcp state                                                   |
| u_int             | retries           | u_int          | tcp_retries               | Tcp retries                                                 |
| u_int             | retriesLatency    | u_int          | tcp_retries_latency       | Tcp retries latency in milliseconds                         |
| u_int             | dupSynAcks        | u_int          | tcp_duplicate_synacks     | Tcp duplicate syn/ack packages                              |
| u_int             | rtt               | u_int          | tcp_rtt                   | Tcp RTT                                                     |
| u_int             | mss               | u_int          | tcp_mss                   | Tcp mss (maxium segment size)                               |
| u_int             | connLatency       | u_int          | tcp_connection_latency    | Tcp connection latency in milliseconds                      |
| u_int             | totalPkts         | u_int          | tcp_total_packets         | Tcp total packages                                          |
| u_int             | tinyPkts          | u_int          | tcp_tiny_packets          | Tcp tiny packets                                            |
| u_int             | pawsPkts          | u_int          | tcp_paws_packets          | Tcp PAWS (Protect Against Wrapped Sequence numbers) packets |
| u_int             | retransmittedPkts | u_int          | tcp_retransmitted_packets | Tcp retransmitted packets                                   |
| u_int             | outOfOrderPkts    | u_int          | tcp_out_of_order_packets  | Tcp out of order packets                                    |
| u_int             | zeroWindows       | u_int          | tcp_zero_windows          | Tcp zero windows                                            |
| u_int             | dupAcks           | u_int          | tcp_duplicate_acks        | Tcp duplicate acks                                          |
|-------------------+-------------------+----------------+---------------------------+-------------------------------------------------------------|

 Notes: Tcp state for tcp breakdown
 #+BEGIN_SRC c
   typedef enum {
       TCP_BREAKDOWN_CONNECTED = 0,        /**< Tcp connection connected */
       TCP_BREAKDOWN_DATA_EXCHANGING,      /**< Tcp connection data exchanging */
       TCP_BREAKDOWN_CLOSED,               /**< Tcp connection closed */
       TCP_BREAKDOWN_RESET_TYPE1,          /**< Tcp connection reset type1 (from client and before connected) */
       TCP_BREAKDOWN_RESET_TYPE2,          /**< Tcp connection reset type2 (from server and before connected) */
       TCP_BREAKDOWN_RESET_TYPE3,          /**< Tcp connection reset type3 (from client and after connected) */
       TCP_BREAKDOWN_RESET_TYPE4           /**< Tcp connection reset type4 (from server and after connected) */
   } tcpBreakdownState;
 #+END_SRC
 
** ICMP breakdown interface
 |----------------+---------------+----------------+------------------------+------------------------|
 | variable type  | variable name | breakdown type | breakdown name         | description            |
 |----------------+---------------+----------------+------------------------+------------------------|
 | /              | <             | <              | <                      | <                      |
 | u_long_long    | timestamp     | u_long_long    | timestamp              | Timestamp in seconds   |
 | u_char         | type          | u_int          | icmp_type              | Icmp type              |
 | u_char         | code          | u_int          | icmp_code              | Icmp code              |
 | struct in_addr | ip            | char *         | icmp_dest_unreach_ip   | Icmp dest unreach ip   |
 | u_short        | port          | u_short        | icmp_dest_unreach_port | Icmp dest unreach port |
 |----------------+---------------+----------------+------------------------+------------------------|

 
** Default breakdown interface
 |---------------+---------------+----------------+------------------------+-----------------------------|
 | variable type | variable name | breakdown type | breakdown name         | description                 |
 |---------------+---------------+----------------+------------------------+-----------------------------|
 | /             | <             | <              | <                      | <                           |
 | u_int         | exchangeSize  | u_int          | default_exchange_size  | Default data size exchanged |
 | u_int         | serverLatency | u_int          | default_server_latency | Default server latency      |
 |---------------+---------------+----------------+------------------------+-----------------------------|

 * Http breakdown interface
 |--------------------+--------------------+----------------+---------------------------+-----------------------------------|
 | variable type      | variable name      | breakdown type | breakdown name            | description                       |
 |--------------------+--------------------+----------------+---------------------------+-----------------------------------|
 | /                  | <                  | <              | <                         | <                                 |
 | char *             | reqVer             | char *         | http_request_version      | Http protocol request version     |
 | char *             | method             | char *         | http_method               | Http request method               |
 | char *             | url                | char *         | http_url                  | Http request url                  |
 | char *             | host               | char *         | http_host                 | Http server host                  |
 | char *             | userAgent          | char *         | http_user_agent           | Http request user agent           |
 | char *             | referer            | char *         | http_referer              | Http request referer              |
 | char *             | accept             | char *         | http_accept               | Http request accept sourses       |
 | char *             | acceptLanguage     | char *         | http_accept_language      | Http request accept language      |
 | char *             | acceptEncoding     | char *         | http_accept_encoding      | Http request accept encoding      |
 | char *             | xForwardedFor      | char *         | http_x_forwarded_for      | Http request x forwarded for      |
 | char *             | reqConnection      | char *         | http_request_connection   | Http request connection           |
 | char *             | respVer            | char *         | http_response_version     | Http protocol response version    |
 | char *             | contentType        | char *         | http_content_type         | Http response content type        |
 | char *             | contentDisposition | char *         | http_content_disposition  | Http response content disposition |
 | char *             | transferEncoding   | char *         | http_transfer_encoding    | Http response transfer encoding   |
 | char *             | respConnection     | char *         | http_response_connection  | Http response connection          |
 | httpBreakdownState | state              | u_int          | http_state                | Http state                        |
 | u_short            | statusCode         | u_short        | http_status_code          | Http status code                  |
 | u_int              | reqHeaderSize      | u_int          | http_request_header_size  | Http request header size          |
 | u_int              | reqBodySize        | u_int          | http_request_body_size    | Http request body size            |
 | u_int              | respHeaderSize     | u_int          | http_response_header_size | Http response header size         |
 | u_int              | respBodySize       | u_int          | http_response_body_size   | Http response body size           |
 | u_int              | respLatency        | u_int          | http_response_latency     | Http response latency             |
 | u_int              | downloadLatency    | u_int          | http_download_latency     | Http download latency             |
 |--------------------+--------------------+----------------+---------------------------+-----------------------------------|

 Notes: Http state for http breakdown
 #+BEGIN_SRC c
   typedef enum {
       HTTP_BREAKDOWN_OK = 0,
       HTTP_BREAKDOWN_ERROR,
       HTTP_BREAKDOWN_RESET_TYPE1,         /**< Http reset during request */
       HTTP_BREAKDOWN_RESET_TYPE2,         /**< Http reset before response */
       HTTP_BREAKDOWN_RESET_TYPE3,         /**< Http reset during response */
       HTTP_BREAKDOWN_RESET_TYPE4          /**< Http reset without request */
   } httpBreakdownState;
 #+END_SRC

** Mysql breakdown interface
 |---------------------+-----------------+----------------+-------------------------+-------------------------|
 | variable type       | variable name   | breakdown type | breakdown name          | description             |
 |---------------------+-----------------+----------------+-------------------------+-------------------------|
 | /                   | <               | <              | <                       | <                       |
 | char *              | serverVer       | char *         | mysql_server_version    | Mysql server version    |
 | char *              | userName        | char *         | mysql_user_name         | Mysql user name         |
 | u_int               | conId           | u_int          | mysql_connection_id     | Mysql connection id     |
 | char *              | reqStmt         | char *         | mysql_request_statement | Mysql request statement |
 | mysqlBreakdownState | state           | u_int          | mysql_state             | Mysql state             |
 | u_short             | errCode         | u_short        | mysql_error_code        | Mysql error code        |
 | u_int               | sqlState        | u_int          | mysql_sql_state         | Mysql sql state         |
 | char *              | errMsg          | char *         | mysql_error_message     | Mysql error message     |
 | u_int               | reqSize         | u_int          | mysql_request_size      | Mysql request size      |
 | u_int               | respSize        | u_int          | mysql_response_size     | Mysql response size     |
 | u_int               | respLatency     | u_int          | mysql_response_latency  | Mysql response latency  |
 | u_int               | downloadLatency | u_int          | mysql_download_latency  | Mysql download latency  |
 |---------------------+-----------------+----------------+-------------------------+-------------------------|

Notes: Mysql state for mysql breakdown
#+BEGIN_SRC c
  typedef enum {
      MYSQL_BREAKDOWN_OK = 0,
      MYSQL_BREAKDOWN_ERROR,
      MYSQL_BREAKDOWN_RESET_TYPE1,        /**< Mysql reset during request */
      MYSQL_BREAKDOWN_RESET_TYPE2,        /**< Mysql reset before response */
      MYSQL_BREAKDOWN_RESET_TYPE3,        /**< Mysql reset during response */
      MYSQL_BREAKDOWN_RESET_TYPE4         /**< Mysql reset without request */
  } mysqlBreakdownState;
#+END_SRC
